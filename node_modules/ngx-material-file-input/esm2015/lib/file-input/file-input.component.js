/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, HostBinding, Renderer2, HostListener, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MatFormFieldControl } from '@angular/material';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { FileInput } from '../model/file-input.model';
export class FileInputComponent {
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     * @param {?} ngControl
     * @param {?} fm
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(ngControl, fm, _elementRef, _renderer) {
        this.ngControl = ngControl;
        this.fm = fm;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.stateChanges = new Subject();
        this.focused = false;
        this.controlType = 'file-input';
        this.autofilled = false;
        this._required = false;
        this.accept = null;
        this.id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;
        this.describedBy = '';
        this._onChange = (_) => { };
        this._onTouched = () => { };
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {
            this.focused = !!origin;
            this.stateChanges.next();
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) {
        this.describedBy = ids.join(' ');
    }
    /**
     * @return {?}
     */
    get value() {
        return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
    }
    /**
     * @param {?} fileInput
     * @return {?}
     */
    set value(fileInput) {
        if (fileInput) {
            this.writeValue(fileInput);
            this.stateChanges.next();
        }
    }
    /**
     * @return {?}
     */
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @param {?} plh
     * @return {?}
     */
    set placeholder(plh) {
        this._placeholder = plh;
        this.stateChanges.next();
    }
    /**
     * Whether the current input has files
     * @return {?}
     */
    get empty() {
        return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
    }
    /**
     * @return {?}
     */
    get shouldLabelFloat() {
        return this.focused || !this.empty || this.valuePlaceholder !== undefined;
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    set required(req) {
        this._required = coerceBooleanProperty(req);
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get isDisabled() {
        return this.disabled;
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._elementRef.nativeElement.disabled;
    }
    /**
     * @param {?} dis
     * @return {?}
     */
    set disabled(dis) {
        this.setDisabledState(coerceBooleanProperty(dis));
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    get errorState() {
        return this.ngControl.errors !== null && !!this.ngControl.touched;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        if (((/** @type {?} */ (event.target))).tagName.toLowerCase() !== 'input' && !this.disabled) {
            this._elementRef.nativeElement.querySelector('input').focus();
            this.focused = true;
            this.open();
        }
    }
    /**
     * @return {?}
     */
    get fileNames() {
        return this.value ? this.value.fileNames : this.valuePlaceholder;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Remove all files from the file input component
     * @param {?=} event
     * @return {?}
     */
    clear(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.value = new FileInput([]);
        this._elementRef.nativeElement.querySelector('input').value = null;
        this._onChange(this.value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    change(event) {
        /** @type {?} */
        const fileList = ((/** @type {?} */ (event.target))).files;
        /** @type {?} */
        const fileArray = [];
        if (fileList) {
            for (let i = 0; i < fileList.length; i++) {
                fileArray.push(fileList[i]);
            }
        }
        this.value = new FileInput(fileArray);
        this._onChange(this.value);
    }
    /**
     * @return {?}
     */
    blur() {
        this.focused = false;
        this._onTouched();
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.multiple = coerceBooleanProperty(this.multiple);
    }
    /**
     * @return {?}
     */
    open() {
        if (!this.disabled) {
            this._elementRef.nativeElement.querySelector('input').click();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChanges.complete();
        this.fm.stopMonitoring(this._elementRef.nativeElement);
    }
}
FileInputComponent.nextId = 0;
FileInputComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-mat-file-input',
                template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\">{{ fileNames }}</span>\n",
                providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }],
                styles: [":host{display:inline-block}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block}"]
            }] }
];
/** @nocollapse */
FileInputComponent.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: FocusMonitor },
    { type: ElementRef },
    { type: Renderer2 }
];
FileInputComponent.propDecorators = {
    autofilled: [{ type: Input }],
    valuePlaceholder: [{ type: Input }],
    multiple: [{ type: Input }],
    accept: [{ type: Input }],
    id: [{ type: HostBinding }],
    describedBy: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
    value: [{ type: Input }],
    placeholder: [{ type: Input }],
    shouldLabelFloat: [{ type: HostBinding, args: ['class.mat-form-field-should-float',] }],
    required: [{ type: Input }],
    isDisabled: [{ type: HostBinding, args: ['class.file-input-disabled',] }],
    disabled: [{ type: Input }],
    errorState: [{ type: Input }],
    change: [{ type: HostListener, args: ['change', ['$event'],] }],
    blur: [{ type: HostListener, args: ['focusout',] }]
};
if (false) {
    /** @type {?} */
    FileInputComponent.nextId;
    /** @type {?} */
    FileInputComponent.prototype.stateChanges;
    /** @type {?} */
    FileInputComponent.prototype.focused;
    /** @type {?} */
    FileInputComponent.prototype.controlType;
    /** @type {?} */
    FileInputComponent.prototype.autofilled;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._required;
    /** @type {?} */
    FileInputComponent.prototype.valuePlaceholder;
    /** @type {?} */
    FileInputComponent.prototype.multiple;
    /** @type {?} */
    FileInputComponent.prototype.accept;
    /** @type {?} */
    FileInputComponent.prototype.id;
    /** @type {?} */
    FileInputComponent.prototype.describedBy;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._onTouched;
    /** @type {?} */
    FileInputComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype.fm;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,