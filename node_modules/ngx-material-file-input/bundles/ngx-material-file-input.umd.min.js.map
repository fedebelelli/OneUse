{"version":3,"sources":["ng://ngx-material-file-input/lib/model/file-input-config.model.ts","ng://ngx-material-file-input/lib/model/file-input.model.ts","ng://ngx-material-file-input/lib/file-input/file-input.component.ts","ng://ngx-material-file-input/lib/pipe/byte-format.pipe.ts","ng://ngx-material-file-input/lib/material-file-input.module.ts","ng://ngx-material-file-input/lib/validator/file-validator.ts"],"names":["NGX_MAT_FILE_INPUT_CONFIG","InjectionToken","FileInputConfig","FileInput","_files","delimiter","this","_fileNames","map","f","name","join","Object","defineProperty","prototype","FileInputComponent","ngControl","fm","_elementRef","_renderer","_this","stateChanges","Subject","focused","controlType","autofilled","_required","accept","id","nextId","describedBy","_onChange","_","_onTouched","valueAccessor","monitor","nativeElement","subscribe","origin","next","setDescribedByIds","ids","empty","value","fileInput","writeValue","_placeholder","plh","length","valuePlaceholder","undefined","req","coerceBooleanProperty","disabled","dis","setDisabledState","errors","touched","onContainerClick","event","tagName","toLowerCase","querySelector","focus","open","fileNames","obj","setProperty","files","registerOnChange","fn","registerOnTouched","clear","preventDefault","stopPropagation","change","fileList","fileArray","i","push","blur","isDisabled","ngOnInit","multiple","click","ngOnDestroy","complete","stopMonitoring","Component","args","selector","template","providers","provide","MatFormFieldControl","useExisting","NgControl","decorators","type","Optional","Self","FocusMonitor","ElementRef","Renderer2","Input","HostBinding","HostListener","ByteFormatPipe","config","unit","sizeUnit","transform","parseInt","formatBytes","bytes","decimals","B","charAt","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","Pipe","Inject","MaterialFileInputModule","NgModule","declarations","exports","FileValidator","maxContentSize","control","size","reduce","acc","actualSize","maxSize"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/**\n * Optional token to provide custom configuration to the module\n */\nexport const NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken<FileInputConfig>(\n  'ngx-mat-file-input.config'\n);\n\n/**\n * Provide additional configuration to dynamically customize the module injection\n */\nexport class FileInputConfig {\n  /**\n   * Unit used with the ByteFormatPipe, default value is *Byte*.\n   * The first letter is used for the short notation.\n   */\n  sizeUnit: string;\n}\n","/**\n * The files to be uploaded\n */\nexport class FileInput {\n  private _fileNames: string;\n\n  constructor(private _files: File[] | null, private delimiter: string = ', ') {\n    this._fileNames = (this._files || []).map((f: File) => f.name).join(delimiter);\n  }\n\n  get files() {\n    return this._files || [];\n  }\n\n  get fileNames(): string {\n    return this._fileNames;\n  }\n}\n","import { Component, OnInit, Input, ElementRef, OnDestroy, HostBinding, Renderer2, HostListener, Optional, Self } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\n\nimport { FileInput } from '../model/file-input.model';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-mat-file-input',\n  templateUrl: './file-input.component.html',\n  styleUrls: ['./file-input.component.css'],\n  providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }]\n})\nexport class FileInputComponent implements MatFormFieldControl<FileInput>, ControlValueAccessor, OnInit, OnDestroy {\n  static nextId = 0;\n\n  stateChanges = new Subject<void>();\n  focused = false;\n  controlType = 'file-input';\n\n  @Input() autofilled = false;\n\n  private _placeholder: string;\n  private _required = false;\n\n  @Input() valuePlaceholder: string;\n  @Input() multiple: boolean;\n  @Input() accept: string | null = null;\n\n  @HostBinding() id = `ngx-mat-file-input-${FileInputComponent.nextId++}`;\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  @Input()\n  get value(): FileInput | null {\n    return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);\n  }\n  set value(fileInput: FileInput | null) {\n    if (fileInput) {\n      this.writeValue(fileInput);\n      this.stateChanges.next();\n    }\n  }\n\n  @Input()\n  get placeholder() {\n    return this._placeholder;\n  }\n  set placeholder(plh) {\n    this._placeholder = plh;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Whether the current input has files\n   */\n  get empty() {\n    return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;\n  }\n\n  @HostBinding('class.mat-form-field-should-float')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty || this.valuePlaceholder !== undefined;\n  }\n\n  @Input()\n  get required() {\n    return this._required;\n  }\n  set required(req: boolean) {\n    this._required = coerceBooleanProperty(req);\n    this.stateChanges.next();\n  }\n\n  @HostBinding('class.file-input-disabled')\n  get isDisabled() {\n    return this.disabled;\n  }\n  @Input()\n  get disabled(): boolean {\n    return this._elementRef.nativeElement.disabled;\n  }\n  set disabled(dis: boolean) {\n    this.setDisabledState(coerceBooleanProperty(dis));\n    this.stateChanges.next();\n  }\n\n  @Input()\n  get errorState(): boolean {\n    return this.ngControl.errors !== null && !!this.ngControl.touched;\n  }\n\n  onContainerClick(event: MouseEvent) {\n    if ((event.target as Element).tagName.toLowerCase() !== 'input' && !this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').focus();\n      this.focused = true;\n      this.open();\n    }\n  }\n\n  /**\n   * @see https://angular.io/api/forms/ControlValueAccessor\n   */\n  constructor(\n    @Optional()\n    @Self()\n    public ngControl: NgControl,\n    private fm: FocusMonitor,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    if (this.ngControl != null) {\n      this.ngControl.valueAccessor = this;\n    }\n    fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {\n      this.focused = !!origin;\n      this.stateChanges.next();\n    });\n  }\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  get fileNames() {\n    return this.value ? this.value.fileNames : this.valuePlaceholder;\n  }\n\n  writeValue(obj: FileInput | null): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);\n  }\n\n  registerOnChange(fn: (_: any) => void): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Remove all files from the file input component\n   * @param [event] optional event that may have triggered the clear action\n   */\n  clear(event?: Event) {\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    this.value = new FileInput([]);\n    this._elementRef.nativeElement.querySelector('input').value = null;\n    this._onChange(this.value);\n  }\n\n  @HostListener('change', ['$event'])\n  change(event: Event) {\n    const fileList: FileList | null = (<HTMLInputElement>event.target).files;\n    const fileArray: File[] = [];\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        fileArray.push(fileList[i]);\n      }\n    }\n    this.value = new FileInput(fileArray);\n    this._onChange(this.value);\n  }\n\n  @HostListener('focusout')\n  blur() {\n    this.focused = false;\n    this._onTouched();\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  ngOnInit() {\n    this.multiple = coerceBooleanProperty(this.multiple);\n  }\n\n  open() {\n    if (!this.disabled) {\n      this._elementRef.nativeElement.querySelector('input').click();\n    }\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this.fm.stopMonitoring(this._elementRef.nativeElement);\n  }\n}\n","import { Pipe, PipeTransform, Optional, Inject } from '@angular/core';\nimport { FileInputConfig, NGX_MAT_FILE_INPUT_CONFIG } from '../model/file-input-config.model';\n\n@Pipe({\n  name: 'byteFormat'\n})\nexport class ByteFormatPipe implements PipeTransform {\n  private unit: string;\n\n  constructor(\n    @Optional()\n    @Inject(NGX_MAT_FILE_INPUT_CONFIG)\n    private config: FileInputConfig\n  ) {\n    this.unit = config ? config.sizeUnit : 'Byte';\n  }\n\n  transform(value: any, args?: any): any {\n    if (parseInt(value, 10) >= 0) {\n      value = this.formatBytes(+value, +args);\n    }\n    return value;\n  }\n\n  private formatBytes(bytes: number, decimals?: number) {\n    if (bytes === 0) {\n      return '0 ' + this.unit;\n    }\n    const B = this.unit.charAt(0);\n    const k = 1024;\n    const dm = decimals || 2;\n    const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { FileInputComponent } from './file-input/file-input.component';\nimport { ByteFormatPipe } from './pipe/byte-format.pipe';\nimport { FileInputConfig } from './model/file-input-config.model';\n\n@NgModule({\n  declarations: [FileInputComponent, ByteFormatPipe],\n  providers: [FocusMonitor],\n  exports: [FileInputComponent, ByteFormatPipe]\n})\nexport class MaterialFileInputModule {}\n","import { ValidatorFn, AbstractControl } from '@angular/forms';\nimport { FileInput } from '../model/file-input.model';\n\nexport namespace FileValidator {\n  /**\n   * Function to control content of files\n   *\n   * @param bytes max number of bytes allowed\n   *\n   * @returns\n   */\n  export function maxContentSize(bytes: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const size = control && control.value ? (control.value as FileInput).files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;\n      const condition = bytes >= size;\n      return condition\n        ? null\n        : {\n            maxContentSize: {\n              actualSize: size,\n              maxSize: bytes\n            }\n          };\n    };\n  }\n}\n"]}