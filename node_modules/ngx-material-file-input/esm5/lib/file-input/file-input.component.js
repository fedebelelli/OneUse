/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, HostBinding, Renderer2, HostListener, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MatFormFieldControl } from '@angular/material';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Subject } from 'rxjs';
import { FileInput } from '../model/file-input.model';
var FileInputComponent = /** @class */ (function () {
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    function FileInputComponent(ngControl, fm, _elementRef, _renderer) {
        var _this = this;
        this.ngControl = ngControl;
        this.fm = fm;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this.stateChanges = new Subject();
        this.focused = false;
        this.controlType = 'file-input';
        this.autofilled = false;
        this._required = false;
        this.accept = null;
        this.id = "ngx-mat-file-input-" + FileInputComponent.nextId++;
        this.describedBy = '';
        this._onChange = function (_) { };
        this._onTouched = function () { };
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        fm.monitor(_elementRef.nativeElement, true).subscribe(function (origin) {
            _this.focused = !!origin;
            _this.stateChanges.next();
        });
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    FileInputComponent.prototype.setDescribedByIds = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        this.describedBy = ids.join(' ');
    };
    Object.defineProperty(FileInputComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
        },
        set: /**
         * @param {?} fileInput
         * @return {?}
         */
        function (fileInput) {
            if (fileInput) {
                this.writeValue(fileInput);
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "placeholder", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholder;
        },
        set: /**
         * @param {?} plh
         * @return {?}
         */
        function (plh) {
            this._placeholder = plh;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "empty", {
        /**
         * Whether the current input has files
         */
        get: /**
         * Whether the current input has files
         * @return {?}
         */
        function () {
            return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "shouldLabelFloat", {
        get: /**
         * @return {?}
         */
        function () {
            return this.focused || !this.empty || this.valuePlaceholder !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} req
         * @return {?}
         */
        function (req) {
            this._required = coerceBooleanProperty(req);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "isDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._elementRef.nativeElement.disabled;
        },
        set: /**
         * @param {?} dis
         * @return {?}
         */
        function (dis) {
            this.setDisabledState(coerceBooleanProperty(dis));
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "errorState", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ngControl.errors !== null && !!this.ngControl.touched;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    FileInputComponent.prototype.onContainerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (((/** @type {?} */ (event.target))).tagName.toLowerCase() !== 'input' && !this.disabled) {
            this._elementRef.nativeElement.querySelector('input').focus();
            this.focused = true;
            this.open();
        }
    };
    Object.defineProperty(FileInputComponent.prototype, "fileNames", {
        get: /**
         * @return {?}
         */
        function () {
            return this.value ? this.value.fileNames : this.valuePlaceholder;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} obj
     * @return {?}
     */
    FileInputComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileInputComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FileInputComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this._onTouched = fn;
    };
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    /**
     * Remove all files from the file input component
     * @param {?=} event
     * @return {?}
     */
    FileInputComponent.prototype.clear = /**
     * Remove all files from the file input component
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.value = new FileInput([]);
        this._elementRef.nativeElement.querySelector('input').value = null;
        this._onChange(this.value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileInputComponent.prototype.change = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var fileList = ((/** @type {?} */ (event.target))).files;
        /** @type {?} */
        var fileArray = [];
        if (fileList) {
            for (var i = 0; i < fileList.length; i++) {
                fileArray.push(fileList[i]);
            }
        }
        this.value = new FileInput(fileArray);
        this._onChange(this.value);
    };
    /**
     * @return {?}
     */
    FileInputComponent.prototype.blur = /**
     * @return {?}
     */
    function () {
        this.focused = false;
        this._onTouched();
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    FileInputComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * @return {?}
     */
    FileInputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.multiple = coerceBooleanProperty(this.multiple);
    };
    /**
     * @return {?}
     */
    FileInputComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this._elementRef.nativeElement.querySelector('input').click();
        }
    };
    /**
     * @return {?}
     */
    FileInputComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.stateChanges.complete();
        this.fm.stopMonitoring(this._elementRef.nativeElement);
    };
    FileInputComponent.nextId = 0;
    FileInputComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ngx-mat-file-input',
                    template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\">{{ fileNames }}</span>\n",
                    providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent }],
                    styles: [":host{display:inline-block}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block}"]
                }] }
    ];
    /** @nocollapse */
    FileInputComponent.ctorParameters = function () { return [
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: FocusMonitor },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FileInputComponent.propDecorators = {
        autofilled: [{ type: Input }],
        valuePlaceholder: [{ type: Input }],
        multiple: [{ type: Input }],
        accept: [{ type: Input }],
        id: [{ type: HostBinding }],
        describedBy: [{ type: HostBinding, args: ['attr.aria-describedby',] }],
        value: [{ type: Input }],
        placeholder: [{ type: Input }],
        shouldLabelFloat: [{ type: HostBinding, args: ['class.mat-form-field-should-float',] }],
        required: [{ type: Input }],
        isDisabled: [{ type: HostBinding, args: ['class.file-input-disabled',] }],
        disabled: [{ type: Input }],
        errorState: [{ type: Input }],
        change: [{ type: HostListener, args: ['change', ['$event'],] }],
        blur: [{ type: HostListener, args: ['focusout',] }]
    };
    return FileInputComponent;
}());
export { FileInputComponent };
if (false) {
    /** @type {?} */
    FileInputComponent.nextId;
    /** @type {?} */
    FileInputComponent.prototype.stateChanges;
    /** @type {?} */
    FileInputComponent.prototype.focused;
    /** @type {?} */
    FileInputComponent.prototype.controlType;
    /** @type {?} */
    FileInputComponent.prototype.autofilled;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._placeholder;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._required;
    /** @type {?} */
    FileInputComponent.prototype.valuePlaceholder;
    /** @type {?} */
    FileInputComponent.prototype.multiple;
    /** @type {?} */
    FileInputComponent.prototype.accept;
    /** @type {?} */
    FileInputComponent.prototype.id;
    /** @type {?} */
    FileInputComponent.prototype.describedBy;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._onChange;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._onTouched;
    /** @type {?} */
    FileInputComponent.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype.fm;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    FileInputComponent.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,