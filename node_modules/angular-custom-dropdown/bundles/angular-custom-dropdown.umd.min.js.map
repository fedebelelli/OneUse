{"version":3,"file":"angular-custom-dropdown.umd.min.js","sources":["~/angular-custom-dropdown/src/toggle-status.ts","~/angular-custom-dropdown/src/dropdown.directive.ts","~/angular-custom-dropdown/src/dropdown-menu.directive.ts","~/angular-custom-dropdown/src/dropdown-toggle.directive.ts","~/angular-custom-dropdown/src/dropdown.module.ts"],"sourcesContent":["\nexport type TOGGLE_STATUS = number;\nexport let TOGGLE_STATUS: any = {};\nTOGGLE_STATUS.OPEN = 0;\nTOGGLE_STATUS.CLOSE = 1;\nTOGGLE_STATUS[TOGGLE_STATUS.OPEN] = \"OPEN\";\nTOGGLE_STATUS[TOGGLE_STATUS.CLOSE] = \"CLOSE\";\n\n","import { Directive, ElementRef, Renderer, HostListener } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport { TOGGLE_STATUS } from './toggle-status';\nexport class DropdownDirective {\nprivate status: TOGGLE_STATUS = TOGGLE_STATUS.CLOSE;\nprivate status$: Subject<TOGGLE_STATUS> = new Subject<TOGGLE_STATUS>();\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\nprivate elementRef: ElementRef,\nprivate renderer: Renderer,\n  ) { }\n/**\n * @param {?=} active\n * @return {?}\n */\nsetActive(active = true) {\n    this.renderer.setElementClass(this.elementRef.nativeElement, 'active', active);\n  }\n/**\n * @return {?}\n */\ntoggle() {\n    if (this.status === TOGGLE_STATUS.OPEN) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n/**\n * @return {?}\n */\nopen() {\n    this.renderer.setElementClass(this.elementRef.nativeElement, 'open', true);\n    if (this.status !== TOGGLE_STATUS.OPEN) {\n      this.status$.next(TOGGLE_STATUS.OPEN);\n    }\n    this.status = TOGGLE_STATUS.OPEN;\n  }\n/**\n * @return {?}\n */\nclose() {\n    this.renderer.setElementClass(this.elementRef.nativeElement, 'open', false);\n    if (this.status !== TOGGLE_STATUS.CLOSE) {\n      this.status$.next(TOGGLE_STATUS.CLOSE);\n    }\n    this.status = TOGGLE_STATUS.CLOSE;\n  }\n/**\n * @return {?}\n */\nstatusChange(): Observable<TOGGLE_STATUS> {\n    return this.status$.asObservable();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropdown]',\n  exportAs: 'dropdown',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\n}\n\nfunction DropdownDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownDirective.ctorParameters;\n/** @type {?} */\nDropdownDirective.prototype.status;\n/** @type {?} */\nDropdownDirective.prototype.status$;\n/** @type {?} */\nDropdownDirective.prototype.elementRef;\n/** @type {?} */\nDropdownDirective.prototype.renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, Host, OnInit, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport'rxjs/add/operator/takeUntil';\n\nimport { TOGGLE_STATUS } from './toggle-status';\nimport { DropdownDirective } from './dropdown.directive';\nexport class DropdownMenuDirective implements OnInit, OnDestroy {\n  ngUnsubscribe: Subject<void> = new Subject<void>();\n/**\n * @param {?} dropdown\n * @param {?} elementRef\n */\nconstructor(\npublic dropdown: DropdownDirective,\nprivate elementRef: ElementRef,\n  ) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.dropdown.statusChange()\n      .takeUntil(this.ngUnsubscribe)\n      .subscribe((newStatus: TOGGLE_STATUS) => {\n        if (newStatus === TOGGLE_STATUS.OPEN) {\n          // Listen to click events to realise when to close the dropdown.\n          document.addEventListener('click', this.onDocumentClick.bind(this), true);\n        } else {\n          document.removeEventListener('click', this.onDocumentClick, true);\n        }\n      });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n\n    document.removeEventListener('click', this.onDocumentClick, true);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDocumentClick(event: MouseEvent) {\n    const /** @type {?} */ target: EventTarget = event.target;\n    if (target instanceof HTMLElement && target.hasAttribute('dropdownToggle')) {\n      // Ignore dropdownToggle element, even if it's outside the menu.\n      return;\n    }\n    const /** @type {?} */ isInsideClick = this.elementRef.nativeElement.contains(target);\n    if (!isInsideClick || target instanceof HTMLElement && target.hasAttribute('href')) {\n      this.dropdown.close();\n    } else {\n      this.dropdown.open();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropdownMenu]',\n  exportAs: 'dropdownMenu',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownDirective, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction DropdownMenuDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownMenuDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownMenuDirective.ctorParameters;\n/** @type {?} */\nDropdownMenuDirective.prototype.ngUnsubscribe;\n/** @type {?} */\nDropdownMenuDirective.prototype.dropdown;\n/** @type {?} */\nDropdownMenuDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Host, HostListener } from '@angular/core';\n\nimport { DropdownDirective } from './dropdown.directive';\nexport class DropdownToggleDirective {\n/**\n * @param {?} dropdown\n */\nconstructor(\npublic dropdown: DropdownDirective) { }\n/**\n * @return {?}\n */\ntoggle() {\n    this.dropdown.toggle();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropdownToggle]',\n  exportAs: 'dropdownToggle',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownDirective, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toggle': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction DropdownToggleDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownToggleDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownToggleDirective.ctorParameters;\n/** @type {?} */\nDropdownToggleDirective.propDecorators;\n/** @type {?} */\nDropdownToggleDirective.prototype.dropdown;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nimport { DropdownDirective } from './dropdown.directive';\nimport { DropdownToggleDirective } from './dropdown-toggle.directive';\nimport { DropdownMenuDirective } from './dropdown-menu.directive';\nexport class DropdownModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [\n    DropdownDirective,\n    DropdownToggleDirective,\n    DropdownMenuDirective,\n  ],\n  declarations: [\n    DropdownDirective,\n    DropdownToggleDirective,\n    DropdownMenuDirective,\n  ],\n  providers: [],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DropdownModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["TOGGLE_STATUS","OPEN","CLOSE","DropdownDirective","elementRef","renderer","this","status","status$","Subject","prototype","setActive","active","setElementClass","nativeElement","toggle","close","open","next","statusChange","asObservable","decorators","type","Directive","args","selector","exportAs","ctorParameters","ElementRef","Renderer","DropdownMenuDirective","dropdown","ngUnsubscribe","ngOnInit","_this","takeUntil","subscribe","newStatus","document","addEventListener","onDocumentClick","bind","removeEventListener","ngOnDestroy","complete","event","target","HTMLElement","hasAttribute","contains","Host","DropdownToggleDirective","propDecorators","HostListener","DropdownModule","NgModule","imports","exports","declarations","providers"],"mappings":"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"}
