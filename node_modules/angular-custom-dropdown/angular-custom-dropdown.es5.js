import { Directive, ElementRef, Host, HostListener, NgModule, Renderer } from '@angular/core';
import { Subject as Subject$1 } from 'rxjs/Subject';
import 'rxjs/add/operator/takeUntil';
var TOGGLE_STATUS = {};
TOGGLE_STATUS.OPEN = 0;
TOGGLE_STATUS.CLOSE = 1;
TOGGLE_STATUS[TOGGLE_STATUS.OPEN] = "OPEN";
TOGGLE_STATUS[TOGGLE_STATUS.CLOSE] = "CLOSE";
var DropdownDirective = (function () {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    function DropdownDirective(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.status = TOGGLE_STATUS.CLOSE;
        this.status$ = new Subject$1();
    }
    /**
     * @param {?=} active
     * @return {?}
     */
    DropdownDirective.prototype.setActive = function (active) {
        if (active === void 0) { active = true; }
        this.renderer.setElementClass(this.elementRef.nativeElement, 'active', active);
    };
    /**
     * @return {?}
     */
    DropdownDirective.prototype.toggle = function () {
        if (this.status === TOGGLE_STATUS.OPEN) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * @return {?}
     */
    DropdownDirective.prototype.open = function () {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'open', true);
        if (this.status !== TOGGLE_STATUS.OPEN) {
            this.status$.next(TOGGLE_STATUS.OPEN);
        }
        this.status = TOGGLE_STATUS.OPEN;
    };
    /**
     * @return {?}
     */
    DropdownDirective.prototype.close = function () {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'open', false);
        if (this.status !== TOGGLE_STATUS.CLOSE) {
            this.status$.next(TOGGLE_STATUS.CLOSE);
        }
        this.status = TOGGLE_STATUS.CLOSE;
    };
    /**
     * @return {?}
     */
    DropdownDirective.prototype.statusChange = function () {
        return this.status$.asObservable();
    };
    return DropdownDirective;
}());
DropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdown]',
                exportAs: 'dropdown',
            },] },
];
/**
 * @nocollapse
 */
DropdownDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer, },
]; };
var DropdownMenuDirective = (function () {
    /**
     * @param {?} dropdown
     * @param {?} elementRef
     */
    function DropdownMenuDirective(dropdown, elementRef) {
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this.ngUnsubscribe = new Subject$1();
    }
    /**
     * @return {?}
     */
    DropdownMenuDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.dropdown.statusChange()
            .takeUntil(this.ngUnsubscribe)
            .subscribe(function (newStatus) {
            if (newStatus === TOGGLE_STATUS.OPEN) {
                // Listen to click events to realise when to close the dropdown.
                document.addEventListener('click', _this.onDocumentClick.bind(_this), true);
            }
            else {
                document.removeEventListener('click', _this.onDocumentClick, true);
            }
        });
    };
    /**
     * @return {?}
     */
    DropdownMenuDirective.prototype.ngOnDestroy = function () {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
        document.removeEventListener('click', this.onDocumentClick, true);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropdownMenuDirective.prototype.onDocumentClick = function (event) {
        var /** @type {?} */ target = event.target;
        if (target instanceof HTMLElement && target.hasAttribute('dropdownToggle')) {
            // Ignore dropdownToggle element, even if it's outside the menu.
            return;
        }
        var /** @type {?} */ isInsideClick = this.elementRef.nativeElement.contains(target);
        if (!isInsideClick || target instanceof HTMLElement && target.hasAttribute('href')) {
            this.dropdown.close();
        }
        else {
            this.dropdown.open();
        }
    };
    return DropdownMenuDirective;
}());
DropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdownMenu]',
                exportAs: 'dropdownMenu',
            },] },
];
/**
 * @nocollapse
 */
DropdownMenuDirective.ctorParameters = function () { return [
    { type: DropdownDirective, decorators: [{ type: Host },] },
    { type: ElementRef, },
]; };
var DropdownToggleDirective = (function () {
    /**
     * @param {?} dropdown
     */
    function DropdownToggleDirective(dropdown) {
        this.dropdown = dropdown;
    }
    /**
     * @return {?}
     */
    DropdownToggleDirective.prototype.toggle = function () {
        this.dropdown.toggle();
    };
    return DropdownToggleDirective;
}());
DropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdownToggle]',
                exportAs: 'dropdownToggle',
            },] },
];
/**
 * @nocollapse
 */
DropdownToggleDirective.ctorParameters = function () { return [
    { type: DropdownDirective, decorators: [{ type: Host },] },
]; };
DropdownToggleDirective.propDecorators = {
    'toggle': [{ type: HostListener, args: ['click',] },],
};
var DropdownModule = (function () {
    function DropdownModule() {
    }
    return DropdownModule;
}());
DropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                exports: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                ],
                declarations: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                ],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
DropdownModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { DropdownMenuDirective, DropdownDirective, DropdownModule, TOGGLE_STATUS, DropdownToggleDirective as Éµa };
//# sourceMappingURL=angular-custom-dropdown.es5.js.map
