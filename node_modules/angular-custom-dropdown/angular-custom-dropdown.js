import { Directive, ElementRef, Host, HostListener, NgModule, Renderer } from '@angular/core';
import { Subject as Subject$1 } from 'rxjs/Subject';
import 'rxjs/add/operator/takeUntil';

let TOGGLE_STATUS = {};
TOGGLE_STATUS.OPEN = 0;
TOGGLE_STATUS.CLOSE = 1;
TOGGLE_STATUS[TOGGLE_STATUS.OPEN] = "OPEN";
TOGGLE_STATUS[TOGGLE_STATUS.CLOSE] = "CLOSE";

class DropdownDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.status = TOGGLE_STATUS.CLOSE;
        this.status$ = new Subject$1();
    }
    /**
     * @param {?=} active
     * @return {?}
     */
    setActive(active = true) {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'active', active);
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.status === TOGGLE_STATUS.OPEN) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    open() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'open', true);
        if (this.status !== TOGGLE_STATUS.OPEN) {
            this.status$.next(TOGGLE_STATUS.OPEN);
        }
        this.status = TOGGLE_STATUS.OPEN;
    }
    /**
     * @return {?}
     */
    close() {
        this.renderer.setElementClass(this.elementRef.nativeElement, 'open', false);
        if (this.status !== TOGGLE_STATUS.CLOSE) {
            this.status$.next(TOGGLE_STATUS.CLOSE);
        }
        this.status = TOGGLE_STATUS.CLOSE;
    }
    /**
     * @return {?}
     */
    statusChange() {
        return this.status$.asObservable();
    }
}
DropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdown]',
                exportAs: 'dropdown',
            },] },
];
/**
 * @nocollapse
 */
DropdownDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];

class DropdownMenuDirective {
    /**
     * @param {?} dropdown
     * @param {?} elementRef
     */
    constructor(dropdown, elementRef) {
        this.dropdown = dropdown;
        this.elementRef = elementRef;
        this.ngUnsubscribe = new Subject$1();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dropdown.statusChange()
            .takeUntil(this.ngUnsubscribe)
            .subscribe((newStatus) => {
            if (newStatus === TOGGLE_STATUS.OPEN) {
                // Listen to click events to realise when to close the dropdown.
                document.addEventListener('click', this.onDocumentClick.bind(this), true);
            }
            else {
                document.removeEventListener('click', this.onDocumentClick, true);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ngUnsubscribe.next();
        this.ngUnsubscribe.complete();
        document.removeEventListener('click', this.onDocumentClick, true);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        const /** @type {?} */ target = event.target;
        if (target instanceof HTMLElement && target.hasAttribute('dropdownToggle')) {
            // Ignore dropdownToggle element, even if it's outside the menu.
            return;
        }
        const /** @type {?} */ isInsideClick = this.elementRef.nativeElement.contains(target);
        if (!isInsideClick || target instanceof HTMLElement && target.hasAttribute('href')) {
            this.dropdown.close();
        }
        else {
            this.dropdown.open();
        }
    }
}
DropdownMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdownMenu]',
                exportAs: 'dropdownMenu',
            },] },
];
/**
 * @nocollapse
 */
DropdownMenuDirective.ctorParameters = () => [
    { type: DropdownDirective, decorators: [{ type: Host },] },
    { type: ElementRef, },
];

class DropdownToggleDirective {
    /**
     * @param {?} dropdown
     */
    constructor(dropdown) {
        this.dropdown = dropdown;
    }
    /**
     * @return {?}
     */
    toggle() {
        this.dropdown.toggle();
    }
}
DropdownToggleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdownToggle]',
                exportAs: 'dropdownToggle',
            },] },
];
/**
 * @nocollapse
 */
DropdownToggleDirective.ctorParameters = () => [
    { type: DropdownDirective, decorators: [{ type: Host },] },
];
DropdownToggleDirective.propDecorators = {
    'toggle': [{ type: HostListener, args: ['click',] },],
};

class DropdownModule {
}
DropdownModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                exports: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                ],
                declarations: [
                    DropdownDirective,
                    DropdownToggleDirective,
                    DropdownMenuDirective,
                ],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
DropdownModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { DropdownMenuDirective, DropdownDirective, DropdownModule, TOGGLE_STATUS, DropdownToggleDirective as Éµa };
//# sourceMappingURL=angular-custom-dropdown.js.map
